import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.protobuf'
    id 'com.github.gmazzo.buildconfig' version "5.3.5"
    id 'org.gradle.idea'
    id 'app.cash.sqldelight'
}
apply from: 'versions.gradle'

repositories {
    google()
    mavenCentral()
}

group 'eu.pretix.pretixdesk'
version '1.0'

buildConfig {
    className('BuildConfig')
    packageName('eu.pretix.libpretixsync')
    useJavaOutput()

    buildConfigField(String, 'DB', 'postgres')
    buildConfigField(String, 'BOOLEAN_TYPE', 'boolean')
    buildConfigField(String, 'BOOLEAN_FALSE', 'false')
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

idea {
    module {
        sourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        testSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
    }
}

repositories {
    mavenCentral()
}

configurations {
    maybeCreate("compile")
}

kotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_11
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

check.dependsOn jacocoTestReport

dependencies {
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testFixturesImplementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "io.requery:requery:$requery_version"
    testFixturesImplementation "io.requery:requery:$requery_version"
    implementation "io.requery:requery-kotlin:$requery_version"
    testFixturesImplementation "io.requery:requery-kotlin:$requery_version"
    implementation "joda-time:joda-time:$joda_version"

    implementation "org.json:json:$json_version"
    testFixturesImplementation "org.json:json:$json_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "net.sourceforge.streamsupport:streamsupport-cfuture:$cfuture_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_core_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_kotlin_version"

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation "net.i2p.crypto:eddsa:$eddsa_version"
    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"

    implementation "app.cash.sqldelight:jdbc-driver:$sqldelight_version"

    kapt "io.requery:requery-processor:$requery_version"
    annotationProcessor "javax.annotation:jsr250-api:$jsr250_version"

    testFixturesImplementation "junit:junit:$junit_version"
    testFixturesImplementation "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources", "${projectDir}/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

sqldelight {
    databases {
        SyncDatabase {
            packageName = "eu.pretix.libpretixsync.sqldelight"
            dialect "app.cash.sqldelight:postgresql-dialect:$sqldelight_version"
            srcDirs('src/main/sqldelight/postgres', 'src/main/sqldelight/common', 'src/main/sqldelight/migrations')
        }
    }
}
