buildscript {
    ext.kotlin_version = '1.5.30'

    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.17"
    }
}

plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}
apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'
apply from: 'versions.gradle'

group 'eu.pretix.pretixdesk'
version '1.0'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

buildConfig {
    appName = "libpretixsync"
    version = "0.0"
    clsName = 'BuildConfig'
    packageName = "eu.pretix.libpretixsync"
    charset = 'UTF-8'
    buildConfigField 'String', 'DB', 'sqlite'
    buildConfigField 'String', 'BOOLEAN_TYPE', 'NUMERIC'
    buildConfigField 'String', 'BOOLEAN_FALSE', '0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        sourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        testSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
    }
}

repositories {
    mavenCentral()
}

configurations {
    maybeCreate("compile")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jacoco {
    toolVersion = "0.8.7"
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.1'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

check.dependsOn jacocoTestReport

dependencies {
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testFixturesImplementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "io.requery:requery:$requery_version"
    testFixturesImplementation "io.requery:requery:$requery_version"
    implementation "io.requery:requery-kotlin:$requery_version"
    testFixturesImplementation "io.requery:requery-kotlin:$requery_version"
    implementation "joda-time:joda-time:$joda_version"

    implementation "org.json:json:$json_version"
    testFixturesImplementation "org.json:json:$json_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "net.sourceforge.streamsupport:streamsupport-cfuture:$cfuture_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_core_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_kotlin_version"

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation "net.i2p.crypto:eddsa:$eddsa_version"
    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"

    kapt "io.requery:requery-processor:$requery_version"
    annotationProcessor "javax.annotation:jsr250-api:$jsr250_version"

    testFixturesImplementation "junit:junit:$junit_version"
    testFixturesImplementation "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources", "${projectDir}/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

sourceSets {
    main {
        java.srcDirs += file("$buildDir/generated/source/kapt/main")
        kotlin.srcDirs += file("$buildDir/generated/source/kapt/main")
    }
}
